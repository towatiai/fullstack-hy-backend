{"version":3,"sources":["services.js","App.js","reportWebVitals.js","index.js"],"names":["baseUrl","getAll","a","axios","get","data","create","newObject","post","update","existingPerson","newPerson","put","id","deletePerson","person","delete","binder","set","e","target","value","Filter","props","filter","onChange","setFilter","PersonForm","useState","name","setNewName","number","setNewNumber","onSubmit","preventDefault","addPerson","type","Persons","persons","map","onClick","Notification","message","className","App","setPersons","notification","setNotification","showNotification","setTimeout","find","window","confirm","services","updatedPerson","p","response","error","useEffect","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aeac806b.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst baseUrl = 'api/persons';\r\n\r\nexport const getAll = async () => {\r\n  return (await axios.get(baseUrl)).data;\r\n}\r\n\r\nexport const create = async newObject => {\r\n    return (await axios.post(baseUrl, newObject)).data;\r\n}\r\n\r\nexport const update = async (existingPerson, newPerson) => {\r\n  return (await axios.put(`${baseUrl}/${existingPerson.id}`, newPerson)).data;\r\n}\r\n\r\nexport const deletePerson = async (person) => {\r\n    return (await axios.delete(`${baseUrl}/${person.id}`)).data;\r\n}","import React, { useState, useEffect } from 'react';\r\nimport * as services from \"./services\";\r\nimport \"./index.css\";\r\n\r\n// Helper function for binding setValue functions\r\nconst binder = (set) => (e) => set(e.target.value);\r\n\r\nconst Filter = (props) => (\r\n  <div>\r\n    Filter shown with <input value={props.filter} onChange={props.setFilter}/>\r\n  </div>\r\n);\r\n\r\nconst PersonForm = (props) => {\r\n  const [ name, setNewName ] = useState('')\r\n  const [ number, setNewNumber ] = useState('')\r\n\r\n  const addPerson = (e) => {\r\n    e.preventDefault();\r\n\r\n    props.addPerson({ name, number });\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={addPerson}>\r\n        <div>\r\n          name: <input value={name} onChange={binder(setNewName)}/>\r\n        </div>\r\n        <div>\r\n          number: <input value={number} onChange={binder(setNewNumber)}/>\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n  );\r\n}\r\n\r\nconst Persons = props =>\r\n  props.persons\r\n  .map(person => <li key={person.id}>\r\n  <span>{person.name}{person.number}</span>\r\n  <button onClick={() => props.delete(person)}>Delete</button>\r\n  </li>)\r\n\r\nconst Notification = ({ message, type }) => (\r\n  <p className={`${type} notification`}>{message}</p>\r\n)\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([]);\r\n  const [ filter, setFilter ] = useState('');\r\n  const [notification, setNotification] = useState();\r\n\r\n  const showNotification = notification => {\r\n    setNotification(notification);\r\n    setTimeout(() => setNotification(null), 3000);\r\n  }\r\n\r\n  const addPerson = async (newPerson) => {\r\n    const existingPerson = persons.find(person => person.name === newPerson.name);\r\n    if (existingPerson) {\r\n      if (!window.confirm(`${newPerson.name} is already added to phonebook, replace old number with the new one?`)) {\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        const updatedPerson = await services.update(existingPerson, newPerson);\r\n        // Simple replace logic\r\n        setPersons(persons.map(p => p.id !== updatedPerson.id ? p : updatedPerson));\r\n        showNotification({ message: `Updated ${updatedPerson.name}`, type: \"success\"});\r\n      } catch {\r\n        showNotification({message: `Information of ${existingPerson.name} has already been removed from the server.`, type: \"error\"});\r\n      }\r\n      \r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await services.create(newPerson);\r\n      setPersons([...persons, response]);\r\n      showNotification({ message: `Added ${newPerson.name}`, type: \"success\"});\r\n    } catch(e) {\r\n      showNotification({message: e.response.data.error, type: \"error\"});\r\n    }\r\n  }\r\n\r\n  const deletePerson = async (person) => {\r\n    if (!window.confirm(`Delete ${person.name}?`)) {\r\n      return;\r\n    }\r\n    \r\n    await services.deletePerson(person);\r\n    setPersons(persons.filter(p => p.id !== person.id));\r\n    showNotification({ message: `Removed ${person.name}`, type: \"success\"});\r\n  }\r\n  \r\n  useEffect(() => {\r\n    // Because of react's limitations...\r\n    (async () => {\r\n      setPersons(await services.getAll());\r\n    })();\r\n    \r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n        { notification?.message && \r\n        <Notification message={notification.message} type={notification.type}/>\r\n        }\r\n        <Filter filter={filter} setFilter={binder(setFilter)}/>\r\n      <h3>Add new</h3>\r\n      <PersonForm addPerson={addPerson}/>\r\n      <h2>Numbers</h2>\r\n      <ul>\r\n      <Persons persons={persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase()))}\r\n        delete={deletePerson}/>\r\n      </ul>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default App","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}