{"version":3,"sources":["services.js","App.js","reportWebVitals.js","index.js"],"names":["baseUrl","getAll","a","axios","get","data","create","newObject","post","update","existingPerson","newPerson","put","id","deletePerson","person","delete","binder","set","e","target","value","Filter","props","filter","onChange","setFilter","PersonForm","useState","name","setNewName","number","setNewNumber","onSubmit","preventDefault","addPerson","type","Persons","persons","map","onClick","Notification","message","className","App","setPersons","notification","setNotification","showNotification","setTimeout","find","window","confirm","services","updatedPerson","p","response","useEffect","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd4a646b.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'api/persons'\n\nexport const getAll = async () => {\n  return (await axios.get(baseUrl)).data;\n}\n\nexport const create = async newObject => {\n  return (await axios.post(baseUrl, newObject)).data;\n}\n\nexport const update = async (existingPerson, newPerson) => {\n  return (await axios.put(`${baseUrl}/${existingPerson.id}`, newPerson)).data;\n}\n\nexport const deletePerson = async (person) => {\n    return (await axios.delete(`${baseUrl}/${person.id}`)).data;\n}","import React, { useState, useEffect } from 'react';\nimport * as services from \"./services\";\nimport \"./index.css\";\n\n// Helper function for binding setValue functions\nconst binder = (set) => (e) => set(e.target.value);\n\nconst Filter = (props) => (\n  <div>\n    Filter shown with <input value={props.filter} onChange={props.setFilter}/>\n  </div>\n);\n\nconst PersonForm = (props) => {\n  const [ name, setNewName ] = useState('')\n  const [ number, setNewNumber ] = useState('')\n\n  const addPerson = (e) => {\n    e.preventDefault();\n\n    props.addPerson({ name, number });\n  }\n\n  return (\n    <form onSubmit={addPerson}>\n        <div>\n          name: <input value={name} onChange={binder(setNewName)}/>\n        </div>\n        <div>\n          number: <input value={number} onChange={binder(setNewNumber)}/>\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n  );\n}\n\nconst Persons = props =>\n  props.persons\n  .map(person => <li key={person.id}>\n  <span>{person.name}{person.number}</span>\n  <button onClick={() => props.delete(person)}>Delete</button>\n  </li>)\n\nconst Notification = ({ message, type }) => (\n  <p className={`${type} notification`}>{message}</p>\n)\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [ filter, setFilter ] = useState('');\n  const [notification, setNotification] = useState();\n\n  const showNotification = notification => {\n    setNotification(notification);\n    setTimeout(() => setNotification(null), 3000);\n  }\n\n  const addPerson = async (newPerson) => {\n    const existingPerson = persons.find(person => person.name === newPerson.name);\n    if (existingPerson) {\n      if (!window.confirm(`${newPerson.name} is already added to phonebook, replace old number with the new one?`)) {\n        return;\n      }\n      \n      try {\n        const updatedPerson = await services.update(existingPerson, newPerson);\n        // Simple replace logic\n        setPersons(persons.map(p => p.id !== updatedPerson.id ? p : updatedPerson));\n        showNotification({ message: `Updated ${updatedPerson.name}`, type: \"success\"});\n      } catch {\n        showNotification({message: `Information of ${existingPerson.name} has already been removed from the server.`, type: \"error\"});\n      }\n      \n      return;\n    }\n\n    const response = await services.create(newPerson);\n    setPersons([...persons, response]);\n\n    showNotification({ message: `Added ${newPerson.name}`, type: \"success\"});\n  }\n\n  const deletePerson = async (person) => {\n    if (!window.confirm(`Delete ${person.name}?`)) {\n      return;\n    }\n    \n    await services.deletePerson(person);\n    setPersons(persons.filter(p => p.id !== person.id));\n    showNotification({ message: `Removed ${person.name}`, type: \"success\"});\n  }\n  \n  useEffect(() => {\n    // Because of react's limitations...\n    (async () => {\n      setPersons(await services.getAll());\n    })();\n    \n  }, [])\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n        { notification?.message && \n        <Notification message={notification.message} type={notification.type}/>\n        }\n        <Filter filter={filter} setFilter={binder(setFilter)}/>\n      <h3>Add new</h3>\n      <PersonForm addPerson={addPerson}/>\n      <h2>Numbers</h2>\n      <ul>\n      <Persons persons={persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase()))}\n        delete={deletePerson}/>\n      </ul>\n    </div>\n  )\n\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}